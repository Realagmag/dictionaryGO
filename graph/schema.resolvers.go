package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"

	"github.com/realagmag/dictionaryGO/graph/model"
)

// CreatePolishWord is the resolver for the createPolishWord field.
func (r *mutationResolver) CreatePolishWord(ctx context.Context, word string) (*model.PolishWord, error) {
	newWord := &model.PolishWord{
		Text: word,
	}
	if err := r.DB.Create(newWord).Error; err != nil {
		return nil, err
	}
	return newWord, nil
}

// CreateEnglishWord is the resolver for the createEnglishWord field.
func (r *mutationResolver) CreateEnglishWord(ctx context.Context, word string) (*model.EnglishWord, error) {
	newWord := &model.EnglishWord{
		Text: word,
	}
	if err := r.DB.Create(newWord).Error; err != nil {
		return nil, err
	}
	return newWord, nil
}

// CreateTranslation is the resolver for the createTranslation field.
func (r *mutationResolver) CreateTranslation(ctx context.Context, polishWord string, englishWord string, examples []string) (*model.Translation, error) {
	panic(fmt.Errorf("not implemented: CreateTranslation - createTranslation"))
}

// CreateExample is the resolver for the createExample field.
func (r *mutationResolver) CreateExample(ctx context.Context, translation model.TranslationInput) (*model.Example, error) {
	panic(fmt.Errorf("not implemented: CreateExample - createExample"))
}

// DeletePolishWord is the resolver for the deletePolishWord field.
func (r *mutationResolver) DeletePolishWord(ctx context.Context, id int) (int, error) {
	panic(fmt.Errorf("not implemented: DeletePolishWord - deletePolishWord"))
}

// DeleteEnglishWord is the resolver for the deleteEnglishWord field.
func (r *mutationResolver) DeleteEnglishWord(ctx context.Context, id int) (int, error) {
	panic(fmt.Errorf("not implemented: DeleteEnglishWord - deleteEnglishWord"))
}

// DeleteTranslation is the resolver for the deleteTranslation field.
func (r *mutationResolver) DeleteTranslation(ctx context.Context, polishWord string, englishWord string) (*model.Translation, error) {
	panic(fmt.Errorf("not implemented: DeleteTranslation - deleteTranslation"))
}

// DeleteExample is the resolver for the deleteExample field.
func (r *mutationResolver) DeleteExample(ctx context.Context, id int) (int, error) {
	panic(fmt.Errorf("not implemented: DeleteExample - deleteExample"))
}

// PolishWords is the resolver for the polishWords field.
func (r *queryResolver) PolishWords(ctx context.Context) ([]*model.PolishWord, error) {
	var words []*model.PolishWord
	if err := r.DB.Find(&words).Error; err != nil {
		return nil, err
	}
	return words, nil
}

// EnglishWords is the resolver for the englishWords field.
func (r *queryResolver) EnglishWords(ctx context.Context) ([]*model.EnglishWord, error) {
	var words []*model.EnglishWord
	if err := r.DB.Find(&words).Error; err != nil {
		return nil, err
	}
	return words, nil
}

// Translations is the resolver for the translations field.
func (r *queryResolver) Translations(ctx context.Context) ([]*model.Translation, error) {
	panic(fmt.Errorf("not implemented: Translations - translations"))
}

// TranslationToEnglish is the resolver for the translationToEnglish field.
func (r *queryResolver) TranslationToEnglish(ctx context.Context, wordInPolish string) ([]*model.Translation, error) {
	panic(fmt.Errorf("not implemented: TranslationToEnglish - translationToEnglish"))
}

// TranslationToPolish is the resolver for the translationToPolish field.
func (r *queryResolver) TranslationToPolish(ctx context.Context, wordInEnglish string) ([]*model.Translation, error) {
	panic(fmt.Errorf("not implemented: TranslationToPolish - translationToPolish"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
