package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"

	"github.com/realagmag/dictionaryGO/graph/model"
	dbModels "github.com/realagmag/dictionaryGO/internal/models"
)

// CreatePolishWord is the resolver for the createPolishWord field.
func (r *mutationResolver) CreatePolishWord(ctx context.Context, word string) (*model.PolishWord, error) {
	polishWord, err := r.DBManager.AddPolishWord(word)
	if err != nil {
		return nil, err
	}
	return r.Converter.PolishToGraphType(polishWord), nil
}

// CreateEnglishWord is the resolver for the createEnglishWord field.
func (r *mutationResolver) CreateEnglishWord(ctx context.Context, word string) (*model.EnglishWord, error) {
	englishWord, err := r.DBManager.AddEnglishWord(word)
	if err != nil {
		return nil, err
	}
	return r.Converter.EnglishToGraphType(englishWord), nil
}

// CreateTranslation is the resolver for the createTranslation field.
func (r *mutationResolver) CreateTranslation(ctx context.Context, translation model.TranslationInput) (*model.Translation, error) {
	translationModel, err := r.DBManager.AddTranslation(translation)
	if err != nil {
		return nil, err
	}
	if err = r.DBManager.PopulateTranslationWithAssociations(translationModel); err != nil {
		return nil, err
	}
	return r.Converter.TranslationToGraphType(translationModel), nil
}

// CreateExample is the resolver for the createExample field.
func (r *mutationResolver) CreateExample(ctx context.Context, example model.IndividualExampleInput) (*model.Example, error) {
	exampleModel, err := r.DBManager.AddExampleToTranslation(example.Example, uint(example.TranslationID))
	if err != nil {
		return nil, err
	}
	return r.Converter.ExampleToGraphType(exampleModel), nil
}

// DeletePolishWord is the resolver for the deletePolishWord field.
func (r *mutationResolver) DeletePolishWord(ctx context.Context, id int) (int, error) {
	if err := r.DBManager.DeleteRecordFromTable(dbModels.PolishWord{}, uint(id)); err != nil {
		return 0, err
	}
	return id, nil
}

// DeleteEnglishWord is the resolver for the deleteEnglishWord field.
func (r *mutationResolver) DeleteEnglishWord(ctx context.Context, id int) (int, error) {
	if err := r.DBManager.DeleteRecordFromTable(dbModels.EnglishWord{}, uint(id)); err != nil {
		return 0, err
	}
	return id, nil
}

// DeleteTranslation is the resolver for the deleteTranslation field.
func (r *mutationResolver) DeleteTranslation(ctx context.Context, id int) (int, error) {
	if err := r.DBManager.DeleteRecordFromTable(dbModels.Translation{}, uint(id)); err != nil {
		return 0, err
	}
	return id, nil
}

// DeleteExample is the resolver for the deleteExample field.
func (r *mutationResolver) DeleteExample(ctx context.Context, id int) (int, error) {
	if err := r.DBManager.DeleteRecordFromTable(dbModels.Example{}, uint(id)); err != nil {
		return 0, err
	}
	return id, nil
}

// UpdateExampleText is the resolver for the updateExampleText field.
func (r *mutationResolver) UpdateExampleText(ctx context.Context, id int, text string) (*model.Example, error) {
	exampleModel, err := r.DBManager.ChangeExampleText(uint(id), text)
	if err != nil {
		return nil, err
	}
	return r.Converter.ExampleToGraphType(exampleModel), nil
}

// UpdatePolishWordText is the resolver for the updatePolishWordText field.
func (r *mutationResolver) UpdatePolishWordText(ctx context.Context, id int, text string) (*model.PolishWord, error) {
	polishWordModel, err := r.DBManager.ChangePolishWordText(uint(id), text)
	if err != nil {
		return nil, err
	}
	return r.Converter.PolishToGraphType(polishWordModel), nil
}

// UpdateEnglishWordText is the resolver for the updateEnglishWordText field.
func (r *mutationResolver) UpdateEnglishWordText(ctx context.Context, id int, text string) (*model.EnglishWord, error) {
	englishWordModel, err := r.DBManager.ChangeEnglishWordText(uint(id), text)
	if err != nil {
		return nil, err
	}
	return r.Converter.EnglishToGraphType(englishWordModel), nil
}

// PolishWords is the resolver for the polishWords field.
func (r *queryResolver) PolishWords(ctx context.Context) ([]*model.PolishWord, error) {
	words, err := r.DBManager.GetPolishWords()
	if err != nil {
		return nil, err
	}
	return r.Converter.PolishSliceToGraphType(words), nil
}

// EnglishWords is the resolver for the englishWords field.
func (r *queryResolver) EnglishWords(ctx context.Context) ([]*model.EnglishWord, error) {
	words, err := r.DBManager.GetEnglishWords()
	if err != nil {
		return nil, err
	}
	return r.Converter.EnglishSliceToGraphType(words), nil
}

// Translations is the resolver for the translations field.
func (r *queryResolver) Translations(ctx context.Context) ([]*model.Translation, error) {
	translationDbModels, err := r.DBManager.GetTranslations()
	if err != nil {
		return nil, err
	}
	translations, err := r.PrepareTranslationSliceToSend(&translationDbModels)
	if err != nil {
		return nil, err
	}
	return translations, nil
}

// TranslationToEnglish is the resolver for the translationToEnglish field.
func (r *queryResolver) TranslationToEnglish(ctx context.Context, wordInPolish string) ([]*model.Translation, error) {
	translationsToEnglish, err := r.DBManager.GetTranslationsToEnglish(wordInPolish)
	if err != nil {
		return nil, err
	}
	translations, err := r.PrepareTranslationSliceToSend(&translationsToEnglish)
	if err != nil {
		return nil, err
	}
	return translations, nil
}

// TranslationToPolish is the resolver for the translationToPolish field.
func (r *queryResolver) TranslationToPolish(ctx context.Context, wordInEnglish string) ([]*model.Translation, error) {
	translationsToPolish, err := r.DBManager.GetTranslationsToPolish(wordInEnglish)
	if err != nil {
		return nil, err
	}
	translations, err := r.PrepareTranslationSliceToSend(&translationsToPolish)
	if err != nil {
		return nil, err
	}
	return translations, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
